import Brand from "../models/brand.model";
import Category from "../models/category.model";

/**
 * Resolves a brand by name.
 *
 * This function attempts to find an existing brand in the database by its `name`.
 * If the brand does not exist, it creates a new one with the provided `name`.
 *
 * It uses `findOneAndUpdate` with the `upsert` option to either find or insert the document in one atomic operation.
 *
 * @param name - The name of the brand to resolve.
 * @returns The existing or newly created brand document.
 *
 * @example
 * const brand = await resolveBrand("Nike");
 * console.log(brand.name); // "Nike"
 */
export const resolveBrand = async (name: string) => {
  const brand = await Brand.findOneAndUpdate(
    {
      name,
    },
    { name },
    { upsert: true, new: true }
  );

  return brand;
};

/**
 * Resolves a category by its slug.
 *
 * This function attempts to find an existing category in the database using the provided `slug`.
 * If the category does not exist, it creates a new one with the derived `name` based on the slug.
 *
 * The `name` is generated by transforming the slug (e.g., `home-appliances`) into a capitalized format (e.g., `Home Appliances`).
 *
 * Uses `findOneAndUpdate` with `upsert` to ensure that a category is either retrieved or inserted atomically.
 * The `$setOnInsert` operator ensures the `name` is only set during insert, not update.
 *
 * @param slug - The slugified identifier for the category (e.g., "home-appliances").
 * @returns The existing or newly created category document.
 *
 * @example
 * const category = await resolveCategory("home-appliances");
 * console.log(category.name); // "Home Appliances"
 */
export const resolveCategory = async (slug: string) => {
  const name = slug
    .split("-")
    .map((s) => s.charAt(0).toUpperCase() + s.slice(1))
    .join(" ");

  const category = await Category.findOneAndUpdate(
    { slug },
    {
      $setOnInsert: { name }, // Only set name if inserting
    },
    { upsert: true, new: true }
  );

  return category;
};

export const resolveValueToObjectId = async (
  model: any,
  field: string,
  value: string
) => {
  const query = {
    [field]: { $regex: value, $options: "i" },
  };

  const doc = await model.findOne(query);
  return doc ? doc._id : null;
};

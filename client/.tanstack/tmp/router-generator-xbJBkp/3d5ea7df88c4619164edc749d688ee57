/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as userNavbarRouteImport } from './routes/(user)/_navbar'
import { Route as adminDashboardRouteImport } from './routes/(admin)/dashboard'
import { Route as userNavbarCartIndexRouteImport } from './routes/(user)/_navbar/cart/index'
import { Route as userNavbarProductsProductsRouteImport } from './routes/(user)/_navbar/products/products'
import { Route as userNavbarProductsProductIdRouteImport } from './routes/(user)/_navbar/products/$productId'

const userRouteImport = createFileRoute('/(user)')()

const userRoute = userRouteImport.update({
  id: '/(user)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const userNavbarRoute = userNavbarRouteImport.update({
  id: '/_navbar',
  getParentRoute: () => userRoute,
} as any)
const adminDashboardRoute = adminDashboardRouteImport.update({
  id: '/(admin)/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const userNavbarCartIndexRoute = userNavbarCartIndexRouteImport.update({
  id: '/cart/',
  path: '/cart/',
  getParentRoute: () => userNavbarRoute,
} as any)
const userNavbarProductsProductsRoute =
  userNavbarProductsProductsRouteImport.update({
    id: '/products/products',
    path: '/products/products',
    getParentRoute: () => userNavbarRoute,
  } as any)
const userNavbarProductsProductIdRoute =
  userNavbarProductsProductIdRouteImport.update({
    id: '/products/$productId',
    path: '/products/$productId',
    getParentRoute: () => userNavbarRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof userNavbarRouteWithChildren
  '/dashboard': typeof adminDashboardRoute
  '/products/$productId': typeof userNavbarProductsProductIdRoute
  '/products/products': typeof userNavbarProductsProductsRoute
  '/cart': typeof userNavbarCartIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof userNavbarRouteWithChildren
  '/dashboard': typeof adminDashboardRoute
  '/products/$productId': typeof userNavbarProductsProductIdRoute
  '/products/products': typeof userNavbarProductsProductsRoute
  '/cart': typeof userNavbarCartIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(admin)/dashboard': typeof adminDashboardRoute
  '/(user)': typeof userRouteWithChildren
  '/(user)/_navbar': typeof userNavbarRouteWithChildren
  '/(user)/_navbar/products/$productId': typeof userNavbarProductsProductIdRoute
  '/(user)/_navbar/products/products': typeof userNavbarProductsProductsRoute
  '/(user)/_navbar/cart/': typeof userNavbarCartIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/products/$productId'
    | '/products/products'
    | '/cart'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/products/$productId'
    | '/products/products'
    | '/cart'
  id:
    | '__root__'
    | '/'
    | '/(admin)/dashboard'
    | '/(user)'
    | '/(user)/_navbar'
    | '/(user)/_navbar/products/$productId'
    | '/(user)/_navbar/products/products'
    | '/(user)/_navbar/cart/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  adminDashboardRoute: typeof adminDashboardRoute
  userRoute: typeof userRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)/_navbar': {
      id: '/(user)/_navbar'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userNavbarRouteImport
      parentRoute: typeof userRoute
    }
    '/(admin)/dashboard': {
      id: '/(admin)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof adminDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)/_navbar/cart/': {
      id: '/(user)/_navbar/cart/'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof userNavbarCartIndexRouteImport
      parentRoute: typeof userNavbarRoute
    }
    '/(user)/_navbar/products/products': {
      id: '/(user)/_navbar/products/products'
      path: '/products/products'
      fullPath: '/products/products'
      preLoaderRoute: typeof userNavbarProductsProductsRouteImport
      parentRoute: typeof userNavbarRoute
    }
    '/(user)/_navbar/products/$productId': {
      id: '/(user)/_navbar/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof userNavbarProductsProductIdRouteImport
      parentRoute: typeof userNavbarRoute
    }
  }
}

interface userNavbarRouteChildren {
  userNavbarProductsProductIdRoute: typeof userNavbarProductsProductIdRoute
  userNavbarProductsProductsRoute: typeof userNavbarProductsProductsRoute
  userNavbarCartIndexRoute: typeof userNavbarCartIndexRoute
}

const userNavbarRouteChildren: userNavbarRouteChildren = {
  userNavbarProductsProductIdRoute: userNavbarProductsProductIdRoute,
  userNavbarProductsProductsRoute: userNavbarProductsProductsRoute,
  userNavbarCartIndexRoute: userNavbarCartIndexRoute,
}

const userNavbarRouteWithChildren = userNavbarRoute._addFileChildren(
  userNavbarRouteChildren,
)

interface userRouteChildren {
  userNavbarRoute: typeof userNavbarRouteWithChildren
}

const userRouteChildren: userRouteChildren = {
  userNavbarRoute: userNavbarRouteWithChildren,
}

const userRouteWithChildren = userRoute._addFileChildren(userRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  adminDashboardRoute: adminDashboardRoute,
  userRoute: userRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
